name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Fix permissions for Neo4j data directory
      run: |
        sudo mkdir -p ./neo4j/data ./neo4j/import ./neo4j/logs ./neo4j/plugins
        sudo chmod -R 777 ./neo4j/data
        sudo chmod -R 777 ./neo4j/import
        sudo chmod -R 777 ./neo4j/logs
        sudo chmod -R 777 ./neo4j/plugins

    - name: Build and push Docker images
      run: |
        docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/my-image:latest --push .

    - name: Start Docker Compose services
      run: |
        docker-compose up -d

    - name: Wait for Neo4j to be ready
      run: |
        echo "Waiting for Neo4j to be ready..."
        RETRIES=20
        until docker exec neo4j-service cypher-shell -u neo4j -p testpassword "RETURN 1" > /dev/null 2>&1 || [ $RETRIES -eq 0 ]; do
          echo "Waiting for Neo4j to start, $((RETRIES--)) remaining attempts..."
          sleep 15
        done

        if [ $RETRIES -eq 0 ]; then
          echo "Neo4j did not start in time"
          exit 1
        fi
        echo "Neo4j is up and running."

    - name: Load data dump to new test db
      run: |
        echo "Loading data dump to test database..."
        docker exec neo4j-service neo4j-admin database load test --from-path=/var/lib/neo4j/import/

    - name: Create the test db
      run: |
        echo "Creating test database..."
        docker exec neo4j-service cypher-shell -u neo4j -p testpassword --file /var/lib/neo4j/import/cypher/createTestDb.cypher

    - name: Wait for test db to be online
      run: |
        echo "Waiting for test database to be online..."
        RETRIES=5
        until docker exec neo4j-service cypher-shell -u neo4j -p testpassword "SHOW DATABASE test YIELD name, currentStatus" | grep -E "online" || [ $RETRIES -eq 0 ]; do
          echo "Waiting for test database to be online, $((RETRIES--)) remaining attempts..."
          sleep 10
        done

        if [ $RETRIES -eq 0 ]; then
          echo "Test database did not come online in time"
          echo "Checking Neo4j logs for more information..."
          docker logs neo4j-service
          exit 1
        fi
        echo "Test database is online."

    - name: Run JMeter tests
      run: |
        JMETER_CONTAINER_NAME="jmeter-service"
        if [ -z "$(docker ps --filter "name=$JMETER_CONTAINER_NAME" --format "{{.Names}}")" ]; then
          echo "JMeter container not found. Please check the docker-compose.yml file."
          exit 1
        fi

        echo "Accessing JMeter container..."
        docker exec $JMETER_CONTAINER_NAME sh -c "
          cd /jmeter || { echo 'JMeter directory not found.'; exit 1; }
          timestamp=\$(date +\"%Y%m%d_%H%M%S\")
          mkdir -p ./report
          report_file=\"./report/test_results_\${timestamp}.jtl\"
          echo 'Running JMeter test plan...'
          jmeter -n -t movies_test_plan.jmx -l \${report_file}
          if [ \$? -ne 0 ]; then
            echo 'Failed to run JMeter test plan.'
            exit 1
          fi
          echo \"JMeter test completed successfully. Results saved to \${report_file}\"
        "

    - name: Copy JMeter test results to host
      run: |
        JMETER_CONTAINER_NAME="jmeter-service"
        if [ -z "$(docker ps --filter "name=$JMETER_CONTAINER_NAME" --format "{{.Names}}")" ]; then
          echo "JMeter container not found. Please check the docker-compose.yml file."
          exit 1
        fi
        echo "Copying JMeter test results to host..."
        docker cp $JMETER_CONTAINER_NAME:/jmeter/report ./jmeter-report

    - name: List contents of jmeter-report directory
      run: |
        echo "Listing contents of jmeter-report directory..."
        ls -l ./jmeter-report

    - name: Upload JMeter test results
      uses: actions/upload-artifact@v2
      with:
        name: jmeter-test-results
        path: ./jmeter-report
